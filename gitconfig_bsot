[user]
  name = Johannes Steudle
  email = johannes.steudle@bosch-softtec.com

[core]
  # open sublime text with new window and wait for result
  editor = subl -n -w
  excludesfile = ~/.gitignore

[push]
  default = simple

[rerere]
  enabled = true

[advice]
  # hide status hints
  statusHints = false

[pager]
  show-branch = true
  # status = true

[grep]
  lineNumber = true

[help]
  autocorrect = 1

[alias]
  ec = config --global -e
  st = status -sb
  ci = commit
  cm = !git add -A && git commit
  co = checkout
  cob = checkout -b
  br = branch -v
  fe = fetch -v
  cl = clean -fd
  up = "!git remote update -p; git merge --ff-only @{u}"
  df = diff
  dfi = diff --ignore-all-space
  ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative  -10
  lg = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative --graph
  la = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat --date=relative
  lc  = "!f() { git ll "$1"^.."$1"; }; f"
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

  # save your work to a specific commit
  save = !git add -A && git commit -m 'SAVEPOINT'
  # and remove it afterwards with keeping the changes
  undo = reset HEAD~1 --mixed

  # use this instead of just resetting your head. It creates a commit and
  # removes it afterwards so work is still reachable with 'reflog'
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

  unstage = 'reset HEAD --'
  last = 'diff HEAD~1'
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  sh = show
  sf = diff --name-status
  count = !sh -c 'git log --oneline | wc -l'

  # http://stackoverflow.com/questions/224687/git-find-duplicate-blobs-files-in-this-tree/8408640#8408640
  dupes = !"git ls-tree -r HEAD | cut -c 13- | sort | uniq -d" # -w 40"

[color]
  diff        = auto
  status      = auto
  branch      = auto
  interactive = auto
  ui          = auto
  pager       = true

[color "branch"]
  current = red reverse
  local   = blue
  remote  = green
  plain = normal

[color "diff"]
  meta = yellow
  frag = magenta
  old  = red bold
  new  = green bold
  plain = white

[color "status"]
  added     = green
  changed   = yellow
  untracked = cyan

[color "interactive"]
  prompt = normal
  header = normal
  help   = normal
  error  = normal

[diff]
  tool = sourcetree

[merge]
  tool = sourcetree

[mergetool]
  keepBackup = true
  prompt = false

[difftool]
  prompt = false

[difftool "p4merge"]
  cmd = /Applications/p4merge.app/Contents/MacOS/p4merge \"$LOCAL\" \"$REMOTE\"
  path =

[mergetool "p4merge"]
  cmd = /Applications/p4merge.app/Contents/MacOS/p4merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
  trustExitCode = true

[difftool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/araxiscompare-w.sh -2 \"$LOCAL\" \"$REMOTE\"
	path = 

[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/araxisgitmerge-w.sh \"$REMOTE\" \"$BASE\" \"$LOCAL\" \"$MERGED\"
	trustExitCode = true

[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true

[mergetool "sublimerge"]
  cmd = subl -n --wait \"$REMOTE\" \"$BASE\" \"$LOCAL\" \"$MERGED\" --command \"sublimerge_diff_views\"
  trustExitCode = false

[difftool "sublimerge"]
  cmd = subl -n --wait \"$REMOTE\" \"$LOCAL\" --command \"sublimerge_diff_views {\\\"left_read_only\\\": true, \\\"right_read_only\\\": true}\"

[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

#[filter "hawser"]
# clean = git hawser clean %f
# smudge = git hawser smudge %f
# required = true

[http]
  sslVerify = true
