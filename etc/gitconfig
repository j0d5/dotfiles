[core]
  excludesfile = ~/.gitignore
	hookspath = ~/.git/hooks
  editor = vim -f # --nomru -c "au VimLeave * !open -a iTerm"'
  # open sublime text with new window and wait for result
  # editor = subl -n -w

[init]
  templatedir = ~/.git/templates

[gpg]
  program = gpg

[push]
  default = current
  # followTags = true

[pull]
  ff = true

[diff]
  tool = sourcetree
  compactionheuristic = true
  context = 4
  indentHeuristic = true
  colorMoved = zebra
  # orderFile = true

[merge]
	tool = sourcetree
  ff = false
  # conflictstyle = diff3
  log = true
  commit = false
  # mergeoptions = --no-commit

[rebase]
	autoStash = true

[blame]
  blankboundary = true

[commit]
  gpgSign = true
	template = ~/.git/templates/commit-msg-template

[stash]
  showPatch = true

[advice]
  # hide status hints
  statusHints = false

[pager]
  show-branch = true
  # log  = diff-highlight | less
  # show = diff-highlight | less
  # diff = diff-highlight | less
  # status = true

[grep]
  lineNumber = true

[help]
  autocorrect = 1

[alias]
  ec = config --global -e # open git configuration in editor
  st = status -sb
  ci = commit
  co = checkout
  cob = checkout -b
  br = branch -v
  fe = fetch -v
  cl = clean -fd
  up = "!git remote update -p; git merge --ff-only @{u}"

  # fast diff without spaces
  dfi = diff --ignore-all-space --minimal

  # tracking branches
  tr = for-each-ref --format='%(refname:short) <- %(upstream:short)' refs/heads

  # show last commit
  lh = log --pretty=commit --decorate=auto --date=relative -1

  # show list of commits
  l = log --decorate --date=relative -5

  # show long list of commits
  ll = log --decorate --date=relative -30

  # show log with graph
  ls = log --graph --oneline --all --decorate --simplify-by-decoration --pretty=graph
  lg = log --graph --oneline --all --decorate --topo-order --date=relative -30
  llg = log --graph --oneline --all --decorate --topo-order
  # lg = log --decorate --date=relative --graph

  # show commit with all file changes
  la = log --decorate --numstat --date=relative

  # show diff to last commit
  last = diff HEAD~1

  # save your work to a specific commit
  save = !git add -A && git commit -m 'SAVEPOINT'
  # and remove it afterwards with keeping the changes
  undo = reset HEAD~1 --mixed

  # human readable commands
  unstage = reset -q HEAD --
  uncommit = reset --mixed HEAD~
  # discard = checkout --

  # use this instead of just resetting your head. It creates a commit and
  # removes it afterwards so work is still reachable with 'reflog'
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

  # new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  # count = !sh -c 'git log --oneline | wc -l'

  # http://stackoverflow.com/questions/224687/git-find-duplicate-blobs-files-in-this-tree/8408640#8408640
  dupes = !"git ls-tree -r HEAD | cut -c 13- | sort | uniq -d" # -w 40"

  # use icdiff as difftool
  icd = difftool --tool=icdiff

  # Tag management
  cleanLocalTags = fetch --prune origin "+refs/tags/*:refs/tags/*"
  renametag = "!sh -c 'set -e; git tag $2 $1; git tag -d $1; git push origin :refs/tags/$1; git push --tags' -"
  renamebranch = "!sh -c 'git push origin origin/$1:refs/heads/$2 :$1' - "

[color]
# normal, black, red, green, yellow, blue, magenta, cyan, or white probably also #ff0ab3
# bold, dim, ul (underline), blink, and reverse
  diff   = auto
  status = auto
  branch = auto
  interactive = auto
  ui     = auto
  frag   = auto
  meta   = auto
  pager  = true
  tag    = blue

[color "branch"]
  current = red reverse
  local   = blue
  remote  = green
  plain   = normal

[color "diff"]
  meta  = white dim
  frag  = cyan
  old   = red #bold
  new   = green #bold
  plain = blue dim

[color "status"]
  added     = green
  changed   = yellow
  untracked = cyan

[color "interactive"]
  prompt = normal
  header = normal
  help   = normal
  error  = normal

[color "decorate"]
  tag = blue

[format]
  pretty = "format:%C(green)%h %C(yellow)[%ad]%Cred%d %Creset%s%Cblue [%cn]"

[pretty]
  commit = "format:%n%C(green)%h %C(yellow)[%ad]%Cred%d %Creset%s%Cblue [%cn{%G?}] %n%n%b%n"
  graph  = "format:%C(green)%h %C(yellow)[%ar]%Cred%d %Creset%s%Cblue [%cn]"

[http]
  sslVerify = true

[mergetool]
  keepBackup = true
  prompt = false

[difftool]
  prompt = false

[difftool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/araxiscompare-w.sh -2 \"$LOCAL\" \"$REMOTE\"
	path =

[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/araxisgitmerge-w.sh \"$REMOTE\" \"$BASE\" \"$LOCAL\" \"$MERGED\"
	trustExitCode = true

[difftool "icdiff"]
  cmd = icdiff --line-numbers --numlines=3 --no-bold $LOCAL $REMOTE

[filter "media"]
  required = true
  clean    = git media clean %f
  smudge   = git media smudge %f

[credential]
  helper = osxkeychain

[include]
  # Load local configs to maybe overwrite anything above
  # git-scm.com/docs/git-config#_includes
  path = ~/.gitconfig_local

[gui]
	recentrepo = /Users/johannes/Developer/git/mySPIN.iOS.ServerSDK

[icdiff]
	options = --highlight --line-numbers

